// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fake_proto_serial.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_fake_5fproto_5fserial_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_fake_5fproto_5fserial_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_fake_5fproto_5fserial_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_fake_5fproto_5fserial_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fake_5fproto_5fserial_2eproto;
namespace pb_viewer {
class Command;
struct CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class IMUAccGyro;
struct IMUAccGyroDefaultTypeInternal;
extern IMUAccGyroDefaultTypeInternal _IMUAccGyro_default_instance_;
class IMUDeviceInfo;
struct IMUDeviceInfoDefaultTypeInternal;
extern IMUDeviceInfoDefaultTypeInternal _IMUDeviceInfo_default_instance_;
class IMUMagnetometer;
struct IMUMagnetometerDefaultTypeInternal;
extern IMUMagnetometerDefaultTypeInternal _IMUMagnetometer_default_instance_;
class IMUTemperature;
struct IMUTemperatureDefaultTypeInternal;
extern IMUTemperatureDefaultTypeInternal _IMUTemperature_default_instance_;
class MCUDeviceInfo;
struct MCUDeviceInfoDefaultTypeInternal;
extern MCUDeviceInfoDefaultTypeInternal _MCUDeviceInfo_default_instance_;
class Message;
struct MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
}  // namespace pb_viewer
PROTOBUF_NAMESPACE_OPEN
template<> ::pb_viewer::Command* Arena::CreateMaybeMessage<::pb_viewer::Command>(Arena*);
template<> ::pb_viewer::IMUAccGyro* Arena::CreateMaybeMessage<::pb_viewer::IMUAccGyro>(Arena*);
template<> ::pb_viewer::IMUDeviceInfo* Arena::CreateMaybeMessage<::pb_viewer::IMUDeviceInfo>(Arena*);
template<> ::pb_viewer::IMUMagnetometer* Arena::CreateMaybeMessage<::pb_viewer::IMUMagnetometer>(Arena*);
template<> ::pb_viewer::IMUTemperature* Arena::CreateMaybeMessage<::pb_viewer::IMUTemperature>(Arena*);
template<> ::pb_viewer::MCUDeviceInfo* Arena::CreateMaybeMessage<::pb_viewer::MCUDeviceInfo>(Arena*);
template<> ::pb_viewer::Message* Arena::CreateMaybeMessage<::pb_viewer::Message>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb_viewer {

enum IMUAccScale : int {
  G_2 = 0,
  G_4 = 1,
  G_8 = 2,
  G_16 = 3,
  IMUAccScale_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  IMUAccScale_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool IMUAccScale_IsValid(int value);
constexpr IMUAccScale IMUAccScale_MIN = G_2;
constexpr IMUAccScale IMUAccScale_MAX = G_16;
constexpr int IMUAccScale_ARRAYSIZE = IMUAccScale_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IMUAccScale_descriptor();
template<typename T>
inline const std::string& IMUAccScale_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IMUAccScale>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IMUAccScale_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IMUAccScale_descriptor(), enum_t_value);
}
inline bool IMUAccScale_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, IMUAccScale* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IMUAccScale>(
    IMUAccScale_descriptor(), name, value);
}
enum IMUGyroScale : int {
  DPS_125 = 0,
  DPS_250 = 1,
  DPS_500 = 2,
  DPS_1000 = 3,
  DPS_2000 = 4,
  IMUGyroScale_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  IMUGyroScale_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool IMUGyroScale_IsValid(int value);
constexpr IMUGyroScale IMUGyroScale_MIN = DPS_125;
constexpr IMUGyroScale IMUGyroScale_MAX = DPS_2000;
constexpr int IMUGyroScale_ARRAYSIZE = IMUGyroScale_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IMUGyroScale_descriptor();
template<typename T>
inline const std::string& IMUGyroScale_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IMUGyroScale>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IMUGyroScale_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IMUGyroScale_descriptor(), enum_t_value);
}
inline bool IMUGyroScale_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, IMUGyroScale* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IMUGyroScale>(
    IMUGyroScale_descriptor(), name, value);
}
// ===================================================================

class MCUDeviceInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_viewer.MCUDeviceInfo) */ {
 public:
  inline MCUDeviceInfo() : MCUDeviceInfo(nullptr) {}
  ~MCUDeviceInfo() override;
  explicit PROTOBUF_CONSTEXPR MCUDeviceInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MCUDeviceInfo(const MCUDeviceInfo& from);
  MCUDeviceInfo(MCUDeviceInfo&& from) noexcept
    : MCUDeviceInfo() {
    *this = ::std::move(from);
  }

  inline MCUDeviceInfo& operator=(const MCUDeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MCUDeviceInfo& operator=(MCUDeviceInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MCUDeviceInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const MCUDeviceInfo* internal_default_instance() {
    return reinterpret_cast<const MCUDeviceInfo*>(
               &_MCUDeviceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MCUDeviceInfo& a, MCUDeviceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MCUDeviceInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MCUDeviceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MCUDeviceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MCUDeviceInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MCUDeviceInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MCUDeviceInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MCUDeviceInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_viewer.MCUDeviceInfo";
  }
  protected:
  explicit MCUDeviceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kRatioOfTickToNsFieldNumber = 3,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // float ratio_of_tick_to_ns = 3;
  void clear_ratio_of_tick_to_ns();
  float ratio_of_tick_to_ns() const;
  void set_ratio_of_tick_to_ns(float value);
  private:
  float _internal_ratio_of_tick_to_ns() const;
  void _internal_set_ratio_of_tick_to_ns(float value);
  public:

  // @@protoc_insertion_point(class_scope:pb_viewer.MCUDeviceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  float ratio_of_tick_to_ns_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fake_5fproto_5fserial_2eproto;
};
// -------------------------------------------------------------------

class IMUDeviceInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_viewer.IMUDeviceInfo) */ {
 public:
  inline IMUDeviceInfo() : IMUDeviceInfo(nullptr) {}
  ~IMUDeviceInfo() override;
  explicit PROTOBUF_CONSTEXPR IMUDeviceInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMUDeviceInfo(const IMUDeviceInfo& from);
  IMUDeviceInfo(IMUDeviceInfo&& from) noexcept
    : IMUDeviceInfo() {
    *this = ::std::move(from);
  }

  inline IMUDeviceInfo& operator=(const IMUDeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMUDeviceInfo& operator=(IMUDeviceInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMUDeviceInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMUDeviceInfo* internal_default_instance() {
    return reinterpret_cast<const IMUDeviceInfo*>(
               &_IMUDeviceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IMUDeviceInfo& a, IMUDeviceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(IMUDeviceInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMUDeviceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IMUDeviceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IMUDeviceInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMUDeviceInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMUDeviceInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMUDeviceInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_viewer.IMUDeviceInfo";
  }
  protected:
  explicit IMUDeviceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kDeviceIdFieldNumber = 3,
    kFrequencyFieldNumber = 4,
    kAccScaleFieldNumber = 5,
    kGyroScaleFieldNumber = 6,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 device_id = 3;
  void clear_device_id();
  uint32_t device_id() const;
  void set_device_id(uint32_t value);
  private:
  uint32_t _internal_device_id() const;
  void _internal_set_device_id(uint32_t value);
  public:

  // float frequency = 4;
  void clear_frequency();
  float frequency() const;
  void set_frequency(float value);
  private:
  float _internal_frequency() const;
  void _internal_set_frequency(float value);
  public:

  // .pb_viewer.IMUAccScale acc_scale = 5;
  void clear_acc_scale();
  ::pb_viewer::IMUAccScale acc_scale() const;
  void set_acc_scale(::pb_viewer::IMUAccScale value);
  private:
  ::pb_viewer::IMUAccScale _internal_acc_scale() const;
  void _internal_set_acc_scale(::pb_viewer::IMUAccScale value);
  public:

  // .pb_viewer.IMUGyroScale gyro_scale = 6;
  void clear_gyro_scale();
  ::pb_viewer::IMUGyroScale gyro_scale() const;
  void set_gyro_scale(::pb_viewer::IMUGyroScale value);
  private:
  ::pb_viewer::IMUGyroScale _internal_gyro_scale() const;
  void _internal_set_gyro_scale(::pb_viewer::IMUGyroScale value);
  public:

  // @@protoc_insertion_point(class_scope:pb_viewer.IMUDeviceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  uint32_t device_id_;
  float frequency_;
  int acc_scale_;
  int gyro_scale_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fake_5fproto_5fserial_2eproto;
};
// -------------------------------------------------------------------

class IMUAccGyro final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_viewer.IMUAccGyro) */ {
 public:
  inline IMUAccGyro() : IMUAccGyro(nullptr) {}
  ~IMUAccGyro() override;
  explicit PROTOBUF_CONSTEXPR IMUAccGyro(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMUAccGyro(const IMUAccGyro& from);
  IMUAccGyro(IMUAccGyro&& from) noexcept
    : IMUAccGyro() {
    *this = ::std::move(from);
  }

  inline IMUAccGyro& operator=(const IMUAccGyro& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMUAccGyro& operator=(IMUAccGyro&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMUAccGyro& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMUAccGyro* internal_default_instance() {
    return reinterpret_cast<const IMUAccGyro*>(
               &_IMUAccGyro_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(IMUAccGyro& a, IMUAccGyro& b) {
    a.Swap(&b);
  }
  inline void Swap(IMUAccGyro* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMUAccGyro* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IMUAccGyro* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IMUAccGyro>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMUAccGyro& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMUAccGyro& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMUAccGyro* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_viewer.IMUAccGyro";
  }
  protected:
  explicit IMUAccGyro(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 2,
    kTickFieldNumber = 3,
    kAccXFieldNumber = 4,
    kAccYFieldNumber = 5,
    kAccZFieldNumber = 6,
    kGyroXFieldNumber = 7,
    kGyroYFieldNumber = 8,
    kGyroZFieldNumber = 9,
  };
  // uint32 device_id = 2;
  void clear_device_id();
  uint32_t device_id() const;
  void set_device_id(uint32_t value);
  private:
  uint32_t _internal_device_id() const;
  void _internal_set_device_id(uint32_t value);
  public:

  // uint32 tick = 3;
  void clear_tick();
  uint32_t tick() const;
  void set_tick(uint32_t value);
  private:
  uint32_t _internal_tick() const;
  void _internal_set_tick(uint32_t value);
  public:

  // float acc_x = 4;
  void clear_acc_x();
  float acc_x() const;
  void set_acc_x(float value);
  private:
  float _internal_acc_x() const;
  void _internal_set_acc_x(float value);
  public:

  // float acc_y = 5;
  void clear_acc_y();
  float acc_y() const;
  void set_acc_y(float value);
  private:
  float _internal_acc_y() const;
  void _internal_set_acc_y(float value);
  public:

  // float acc_z = 6;
  void clear_acc_z();
  float acc_z() const;
  void set_acc_z(float value);
  private:
  float _internal_acc_z() const;
  void _internal_set_acc_z(float value);
  public:

  // float gyro_x = 7;
  void clear_gyro_x();
  float gyro_x() const;
  void set_gyro_x(float value);
  private:
  float _internal_gyro_x() const;
  void _internal_set_gyro_x(float value);
  public:

  // float gyro_y = 8;
  void clear_gyro_y();
  float gyro_y() const;
  void set_gyro_y(float value);
  private:
  float _internal_gyro_y() const;
  void _internal_set_gyro_y(float value);
  public:

  // float gyro_z = 9;
  void clear_gyro_z();
  float gyro_z() const;
  void set_gyro_z(float value);
  private:
  float _internal_gyro_z() const;
  void _internal_set_gyro_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:pb_viewer.IMUAccGyro)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t device_id_;
  uint32_t tick_;
  float acc_x_;
  float acc_y_;
  float acc_z_;
  float gyro_x_;
  float gyro_y_;
  float gyro_z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fake_5fproto_5fserial_2eproto;
};
// -------------------------------------------------------------------

class IMUTemperature final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_viewer.IMUTemperature) */ {
 public:
  inline IMUTemperature() : IMUTemperature(nullptr) {}
  ~IMUTemperature() override;
  explicit PROTOBUF_CONSTEXPR IMUTemperature(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMUTemperature(const IMUTemperature& from);
  IMUTemperature(IMUTemperature&& from) noexcept
    : IMUTemperature() {
    *this = ::std::move(from);
  }

  inline IMUTemperature& operator=(const IMUTemperature& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMUTemperature& operator=(IMUTemperature&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMUTemperature& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMUTemperature* internal_default_instance() {
    return reinterpret_cast<const IMUTemperature*>(
               &_IMUTemperature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(IMUTemperature& a, IMUTemperature& b) {
    a.Swap(&b);
  }
  inline void Swap(IMUTemperature* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMUTemperature* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IMUTemperature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IMUTemperature>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMUTemperature& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMUTemperature& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMUTemperature* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_viewer.IMUTemperature";
  }
  protected:
  explicit IMUTemperature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 2,
    kTickFieldNumber = 3,
    kTemperatureFieldNumber = 4,
  };
  // uint32 device_id = 2;
  void clear_device_id();
  uint32_t device_id() const;
  void set_device_id(uint32_t value);
  private:
  uint32_t _internal_device_id() const;
  void _internal_set_device_id(uint32_t value);
  public:

  // uint32 tick = 3;
  void clear_tick();
  uint32_t tick() const;
  void set_tick(uint32_t value);
  private:
  uint32_t _internal_tick() const;
  void _internal_set_tick(uint32_t value);
  public:

  // float temperature = 4;
  void clear_temperature();
  float temperature() const;
  void set_temperature(float value);
  private:
  float _internal_temperature() const;
  void _internal_set_temperature(float value);
  public:

  // @@protoc_insertion_point(class_scope:pb_viewer.IMUTemperature)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t device_id_;
  uint32_t tick_;
  float temperature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fake_5fproto_5fserial_2eproto;
};
// -------------------------------------------------------------------

class IMUMagnetometer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_viewer.IMUMagnetometer) */ {
 public:
  inline IMUMagnetometer() : IMUMagnetometer(nullptr) {}
  ~IMUMagnetometer() override;
  explicit PROTOBUF_CONSTEXPR IMUMagnetometer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMUMagnetometer(const IMUMagnetometer& from);
  IMUMagnetometer(IMUMagnetometer&& from) noexcept
    : IMUMagnetometer() {
    *this = ::std::move(from);
  }

  inline IMUMagnetometer& operator=(const IMUMagnetometer& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMUMagnetometer& operator=(IMUMagnetometer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMUMagnetometer& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMUMagnetometer* internal_default_instance() {
    return reinterpret_cast<const IMUMagnetometer*>(
               &_IMUMagnetometer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(IMUMagnetometer& a, IMUMagnetometer& b) {
    a.Swap(&b);
  }
  inline void Swap(IMUMagnetometer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMUMagnetometer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IMUMagnetometer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IMUMagnetometer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMUMagnetometer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMUMagnetometer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMUMagnetometer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_viewer.IMUMagnetometer";
  }
  protected:
  explicit IMUMagnetometer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 2,
    kTickFieldNumber = 3,
    kHxFieldNumber = 4,
    kHyFieldNumber = 5,
    kHzFieldNumber = 6,
  };
  // uint32 device_id = 2;
  void clear_device_id();
  uint32_t device_id() const;
  void set_device_id(uint32_t value);
  private:
  uint32_t _internal_device_id() const;
  void _internal_set_device_id(uint32_t value);
  public:

  // uint32 tick = 3;
  void clear_tick();
  uint32_t tick() const;
  void set_tick(uint32_t value);
  private:
  uint32_t _internal_tick() const;
  void _internal_set_tick(uint32_t value);
  public:

  // float hx = 4;
  void clear_hx();
  float hx() const;
  void set_hx(float value);
  private:
  float _internal_hx() const;
  void _internal_set_hx(float value);
  public:

  // float hy = 5;
  void clear_hy();
  float hy() const;
  void set_hy(float value);
  private:
  float _internal_hy() const;
  void _internal_set_hy(float value);
  public:

  // float hz = 6;
  void clear_hz();
  float hz() const;
  void set_hz(float value);
  private:
  float _internal_hz() const;
  void _internal_set_hz(float value);
  public:

  // @@protoc_insertion_point(class_scope:pb_viewer.IMUMagnetometer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t device_id_;
  uint32_t tick_;
  float hx_;
  float hy_;
  float hz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fake_5fproto_5fserial_2eproto;
};
// -------------------------------------------------------------------

class Command final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:pb_viewer.Command) */ {
 public:
  inline Command() : Command(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Command(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command(const Command& from);
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command& operator=(Command&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }
  inline void Swap(Command* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Command& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Command& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_viewer.Command";
  }
  protected:
  explicit Command(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb_viewer.Command)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_fake_5fproto_5fserial_2eproto;
};
// -------------------------------------------------------------------

class Message final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_viewer.Message) */ {
 public:
  inline Message() : Message(nullptr) {}
  ~Message() override;
  explicit PROTOBUF_CONSTEXPR Message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kMcuDeviceInfo = 2,
    kImuDeviceInfo = 3,
    kImuAccGyro = 4,
    kImuTemperature = 5,
    kImuMagnetometer = 6,
    DATA_NOT_SET = 0,
  };

  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Message& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_viewer.Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSequenceIdFieldNumber = 1,
    kMcuDeviceInfoFieldNumber = 2,
    kImuDeviceInfoFieldNumber = 3,
    kImuAccGyroFieldNumber = 4,
    kImuTemperatureFieldNumber = 5,
    kImuMagnetometerFieldNumber = 6,
  };
  // uint32 sequence_id = 1;
  void clear_sequence_id();
  uint32_t sequence_id() const;
  void set_sequence_id(uint32_t value);
  private:
  uint32_t _internal_sequence_id() const;
  void _internal_set_sequence_id(uint32_t value);
  public:

  // .pb_viewer.MCUDeviceInfo mcu_device_info = 2;
  bool has_mcu_device_info() const;
  private:
  bool _internal_has_mcu_device_info() const;
  public:
  void clear_mcu_device_info();
  const ::pb_viewer::MCUDeviceInfo& mcu_device_info() const;
  PROTOBUF_NODISCARD ::pb_viewer::MCUDeviceInfo* release_mcu_device_info();
  ::pb_viewer::MCUDeviceInfo* mutable_mcu_device_info();
  void set_allocated_mcu_device_info(::pb_viewer::MCUDeviceInfo* mcu_device_info);
  private:
  const ::pb_viewer::MCUDeviceInfo& _internal_mcu_device_info() const;
  ::pb_viewer::MCUDeviceInfo* _internal_mutable_mcu_device_info();
  public:
  void unsafe_arena_set_allocated_mcu_device_info(
      ::pb_viewer::MCUDeviceInfo* mcu_device_info);
  ::pb_viewer::MCUDeviceInfo* unsafe_arena_release_mcu_device_info();

  // .pb_viewer.IMUDeviceInfo imu_device_info = 3;
  bool has_imu_device_info() const;
  private:
  bool _internal_has_imu_device_info() const;
  public:
  void clear_imu_device_info();
  const ::pb_viewer::IMUDeviceInfo& imu_device_info() const;
  PROTOBUF_NODISCARD ::pb_viewer::IMUDeviceInfo* release_imu_device_info();
  ::pb_viewer::IMUDeviceInfo* mutable_imu_device_info();
  void set_allocated_imu_device_info(::pb_viewer::IMUDeviceInfo* imu_device_info);
  private:
  const ::pb_viewer::IMUDeviceInfo& _internal_imu_device_info() const;
  ::pb_viewer::IMUDeviceInfo* _internal_mutable_imu_device_info();
  public:
  void unsafe_arena_set_allocated_imu_device_info(
      ::pb_viewer::IMUDeviceInfo* imu_device_info);
  ::pb_viewer::IMUDeviceInfo* unsafe_arena_release_imu_device_info();

  // .pb_viewer.IMUAccGyro imu_acc_gyro = 4;
  bool has_imu_acc_gyro() const;
  private:
  bool _internal_has_imu_acc_gyro() const;
  public:
  void clear_imu_acc_gyro();
  const ::pb_viewer::IMUAccGyro& imu_acc_gyro() const;
  PROTOBUF_NODISCARD ::pb_viewer::IMUAccGyro* release_imu_acc_gyro();
  ::pb_viewer::IMUAccGyro* mutable_imu_acc_gyro();
  void set_allocated_imu_acc_gyro(::pb_viewer::IMUAccGyro* imu_acc_gyro);
  private:
  const ::pb_viewer::IMUAccGyro& _internal_imu_acc_gyro() const;
  ::pb_viewer::IMUAccGyro* _internal_mutable_imu_acc_gyro();
  public:
  void unsafe_arena_set_allocated_imu_acc_gyro(
      ::pb_viewer::IMUAccGyro* imu_acc_gyro);
  ::pb_viewer::IMUAccGyro* unsafe_arena_release_imu_acc_gyro();

  // .pb_viewer.IMUTemperature imu_temperature = 5;
  bool has_imu_temperature() const;
  private:
  bool _internal_has_imu_temperature() const;
  public:
  void clear_imu_temperature();
  const ::pb_viewer::IMUTemperature& imu_temperature() const;
  PROTOBUF_NODISCARD ::pb_viewer::IMUTemperature* release_imu_temperature();
  ::pb_viewer::IMUTemperature* mutable_imu_temperature();
  void set_allocated_imu_temperature(::pb_viewer::IMUTemperature* imu_temperature);
  private:
  const ::pb_viewer::IMUTemperature& _internal_imu_temperature() const;
  ::pb_viewer::IMUTemperature* _internal_mutable_imu_temperature();
  public:
  void unsafe_arena_set_allocated_imu_temperature(
      ::pb_viewer::IMUTemperature* imu_temperature);
  ::pb_viewer::IMUTemperature* unsafe_arena_release_imu_temperature();

  // .pb_viewer.IMUMagnetometer imu_magnetometer = 6;
  bool has_imu_magnetometer() const;
  private:
  bool _internal_has_imu_magnetometer() const;
  public:
  void clear_imu_magnetometer();
  const ::pb_viewer::IMUMagnetometer& imu_magnetometer() const;
  PROTOBUF_NODISCARD ::pb_viewer::IMUMagnetometer* release_imu_magnetometer();
  ::pb_viewer::IMUMagnetometer* mutable_imu_magnetometer();
  void set_allocated_imu_magnetometer(::pb_viewer::IMUMagnetometer* imu_magnetometer);
  private:
  const ::pb_viewer::IMUMagnetometer& _internal_imu_magnetometer() const;
  ::pb_viewer::IMUMagnetometer* _internal_mutable_imu_magnetometer();
  public:
  void unsafe_arena_set_allocated_imu_magnetometer(
      ::pb_viewer::IMUMagnetometer* imu_magnetometer);
  ::pb_viewer::IMUMagnetometer* unsafe_arena_release_imu_magnetometer();

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:pb_viewer.Message)
 private:
  class _Internal;
  void set_has_mcu_device_info();
  void set_has_imu_device_info();
  void set_has_imu_acc_gyro();
  void set_has_imu_temperature();
  void set_has_imu_magnetometer();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t sequence_id_;
  union DataUnion {
    constexpr DataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::pb_viewer::MCUDeviceInfo* mcu_device_info_;
    ::pb_viewer::IMUDeviceInfo* imu_device_info_;
    ::pb_viewer::IMUAccGyro* imu_acc_gyro_;
    ::pb_viewer::IMUTemperature* imu_temperature_;
    ::pb_viewer::IMUMagnetometer* imu_magnetometer_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_fake_5fproto_5fserial_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MCUDeviceInfo

// string name = 2;
inline void MCUDeviceInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& MCUDeviceInfo::name() const {
  // @@protoc_insertion_point(field_get:pb_viewer.MCUDeviceInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MCUDeviceInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb_viewer.MCUDeviceInfo.name)
}
inline std::string* MCUDeviceInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:pb_viewer.MCUDeviceInfo.name)
  return _s;
}
inline const std::string& MCUDeviceInfo::_internal_name() const {
  return name_.Get();
}
inline void MCUDeviceInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* MCUDeviceInfo::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* MCUDeviceInfo::release_name() {
  // @@protoc_insertion_point(field_release:pb_viewer.MCUDeviceInfo.name)
  return name_.Release();
}
inline void MCUDeviceInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb_viewer.MCUDeviceInfo.name)
}

// float ratio_of_tick_to_ns = 3;
inline void MCUDeviceInfo::clear_ratio_of_tick_to_ns() {
  ratio_of_tick_to_ns_ = 0;
}
inline float MCUDeviceInfo::_internal_ratio_of_tick_to_ns() const {
  return ratio_of_tick_to_ns_;
}
inline float MCUDeviceInfo::ratio_of_tick_to_ns() const {
  // @@protoc_insertion_point(field_get:pb_viewer.MCUDeviceInfo.ratio_of_tick_to_ns)
  return _internal_ratio_of_tick_to_ns();
}
inline void MCUDeviceInfo::_internal_set_ratio_of_tick_to_ns(float value) {
  
  ratio_of_tick_to_ns_ = value;
}
inline void MCUDeviceInfo::set_ratio_of_tick_to_ns(float value) {
  _internal_set_ratio_of_tick_to_ns(value);
  // @@protoc_insertion_point(field_set:pb_viewer.MCUDeviceInfo.ratio_of_tick_to_ns)
}

// -------------------------------------------------------------------

// IMUDeviceInfo

// string name = 2;
inline void IMUDeviceInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& IMUDeviceInfo::name() const {
  // @@protoc_insertion_point(field_get:pb_viewer.IMUDeviceInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IMUDeviceInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb_viewer.IMUDeviceInfo.name)
}
inline std::string* IMUDeviceInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:pb_viewer.IMUDeviceInfo.name)
  return _s;
}
inline const std::string& IMUDeviceInfo::_internal_name() const {
  return name_.Get();
}
inline void IMUDeviceInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* IMUDeviceInfo::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* IMUDeviceInfo::release_name() {
  // @@protoc_insertion_point(field_release:pb_viewer.IMUDeviceInfo.name)
  return name_.Release();
}
inline void IMUDeviceInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb_viewer.IMUDeviceInfo.name)
}

// uint32 device_id = 3;
inline void IMUDeviceInfo::clear_device_id() {
  device_id_ = 0u;
}
inline uint32_t IMUDeviceInfo::_internal_device_id() const {
  return device_id_;
}
inline uint32_t IMUDeviceInfo::device_id() const {
  // @@protoc_insertion_point(field_get:pb_viewer.IMUDeviceInfo.device_id)
  return _internal_device_id();
}
inline void IMUDeviceInfo::_internal_set_device_id(uint32_t value) {
  
  device_id_ = value;
}
inline void IMUDeviceInfo::set_device_id(uint32_t value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:pb_viewer.IMUDeviceInfo.device_id)
}

// float frequency = 4;
inline void IMUDeviceInfo::clear_frequency() {
  frequency_ = 0;
}
inline float IMUDeviceInfo::_internal_frequency() const {
  return frequency_;
}
inline float IMUDeviceInfo::frequency() const {
  // @@protoc_insertion_point(field_get:pb_viewer.IMUDeviceInfo.frequency)
  return _internal_frequency();
}
inline void IMUDeviceInfo::_internal_set_frequency(float value) {
  
  frequency_ = value;
}
inline void IMUDeviceInfo::set_frequency(float value) {
  _internal_set_frequency(value);
  // @@protoc_insertion_point(field_set:pb_viewer.IMUDeviceInfo.frequency)
}

// .pb_viewer.IMUAccScale acc_scale = 5;
inline void IMUDeviceInfo::clear_acc_scale() {
  acc_scale_ = 0;
}
inline ::pb_viewer::IMUAccScale IMUDeviceInfo::_internal_acc_scale() const {
  return static_cast< ::pb_viewer::IMUAccScale >(acc_scale_);
}
inline ::pb_viewer::IMUAccScale IMUDeviceInfo::acc_scale() const {
  // @@protoc_insertion_point(field_get:pb_viewer.IMUDeviceInfo.acc_scale)
  return _internal_acc_scale();
}
inline void IMUDeviceInfo::_internal_set_acc_scale(::pb_viewer::IMUAccScale value) {
  
  acc_scale_ = value;
}
inline void IMUDeviceInfo::set_acc_scale(::pb_viewer::IMUAccScale value) {
  _internal_set_acc_scale(value);
  // @@protoc_insertion_point(field_set:pb_viewer.IMUDeviceInfo.acc_scale)
}

// .pb_viewer.IMUGyroScale gyro_scale = 6;
inline void IMUDeviceInfo::clear_gyro_scale() {
  gyro_scale_ = 0;
}
inline ::pb_viewer::IMUGyroScale IMUDeviceInfo::_internal_gyro_scale() const {
  return static_cast< ::pb_viewer::IMUGyroScale >(gyro_scale_);
}
inline ::pb_viewer::IMUGyroScale IMUDeviceInfo::gyro_scale() const {
  // @@protoc_insertion_point(field_get:pb_viewer.IMUDeviceInfo.gyro_scale)
  return _internal_gyro_scale();
}
inline void IMUDeviceInfo::_internal_set_gyro_scale(::pb_viewer::IMUGyroScale value) {
  
  gyro_scale_ = value;
}
inline void IMUDeviceInfo::set_gyro_scale(::pb_viewer::IMUGyroScale value) {
  _internal_set_gyro_scale(value);
  // @@protoc_insertion_point(field_set:pb_viewer.IMUDeviceInfo.gyro_scale)
}

// -------------------------------------------------------------------

// IMUAccGyro

// uint32 device_id = 2;
inline void IMUAccGyro::clear_device_id() {
  device_id_ = 0u;
}
inline uint32_t IMUAccGyro::_internal_device_id() const {
  return device_id_;
}
inline uint32_t IMUAccGyro::device_id() const {
  // @@protoc_insertion_point(field_get:pb_viewer.IMUAccGyro.device_id)
  return _internal_device_id();
}
inline void IMUAccGyro::_internal_set_device_id(uint32_t value) {
  
  device_id_ = value;
}
inline void IMUAccGyro::set_device_id(uint32_t value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:pb_viewer.IMUAccGyro.device_id)
}

// uint32 tick = 3;
inline void IMUAccGyro::clear_tick() {
  tick_ = 0u;
}
inline uint32_t IMUAccGyro::_internal_tick() const {
  return tick_;
}
inline uint32_t IMUAccGyro::tick() const {
  // @@protoc_insertion_point(field_get:pb_viewer.IMUAccGyro.tick)
  return _internal_tick();
}
inline void IMUAccGyro::_internal_set_tick(uint32_t value) {
  
  tick_ = value;
}
inline void IMUAccGyro::set_tick(uint32_t value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:pb_viewer.IMUAccGyro.tick)
}

// float acc_x = 4;
inline void IMUAccGyro::clear_acc_x() {
  acc_x_ = 0;
}
inline float IMUAccGyro::_internal_acc_x() const {
  return acc_x_;
}
inline float IMUAccGyro::acc_x() const {
  // @@protoc_insertion_point(field_get:pb_viewer.IMUAccGyro.acc_x)
  return _internal_acc_x();
}
inline void IMUAccGyro::_internal_set_acc_x(float value) {
  
  acc_x_ = value;
}
inline void IMUAccGyro::set_acc_x(float value) {
  _internal_set_acc_x(value);
  // @@protoc_insertion_point(field_set:pb_viewer.IMUAccGyro.acc_x)
}

// float acc_y = 5;
inline void IMUAccGyro::clear_acc_y() {
  acc_y_ = 0;
}
inline float IMUAccGyro::_internal_acc_y() const {
  return acc_y_;
}
inline float IMUAccGyro::acc_y() const {
  // @@protoc_insertion_point(field_get:pb_viewer.IMUAccGyro.acc_y)
  return _internal_acc_y();
}
inline void IMUAccGyro::_internal_set_acc_y(float value) {
  
  acc_y_ = value;
}
inline void IMUAccGyro::set_acc_y(float value) {
  _internal_set_acc_y(value);
  // @@protoc_insertion_point(field_set:pb_viewer.IMUAccGyro.acc_y)
}

// float acc_z = 6;
inline void IMUAccGyro::clear_acc_z() {
  acc_z_ = 0;
}
inline float IMUAccGyro::_internal_acc_z() const {
  return acc_z_;
}
inline float IMUAccGyro::acc_z() const {
  // @@protoc_insertion_point(field_get:pb_viewer.IMUAccGyro.acc_z)
  return _internal_acc_z();
}
inline void IMUAccGyro::_internal_set_acc_z(float value) {
  
  acc_z_ = value;
}
inline void IMUAccGyro::set_acc_z(float value) {
  _internal_set_acc_z(value);
  // @@protoc_insertion_point(field_set:pb_viewer.IMUAccGyro.acc_z)
}

// float gyro_x = 7;
inline void IMUAccGyro::clear_gyro_x() {
  gyro_x_ = 0;
}
inline float IMUAccGyro::_internal_gyro_x() const {
  return gyro_x_;
}
inline float IMUAccGyro::gyro_x() const {
  // @@protoc_insertion_point(field_get:pb_viewer.IMUAccGyro.gyro_x)
  return _internal_gyro_x();
}
inline void IMUAccGyro::_internal_set_gyro_x(float value) {
  
  gyro_x_ = value;
}
inline void IMUAccGyro::set_gyro_x(float value) {
  _internal_set_gyro_x(value);
  // @@protoc_insertion_point(field_set:pb_viewer.IMUAccGyro.gyro_x)
}

// float gyro_y = 8;
inline void IMUAccGyro::clear_gyro_y() {
  gyro_y_ = 0;
}
inline float IMUAccGyro::_internal_gyro_y() const {
  return gyro_y_;
}
inline float IMUAccGyro::gyro_y() const {
  // @@protoc_insertion_point(field_get:pb_viewer.IMUAccGyro.gyro_y)
  return _internal_gyro_y();
}
inline void IMUAccGyro::_internal_set_gyro_y(float value) {
  
  gyro_y_ = value;
}
inline void IMUAccGyro::set_gyro_y(float value) {
  _internal_set_gyro_y(value);
  // @@protoc_insertion_point(field_set:pb_viewer.IMUAccGyro.gyro_y)
}

// float gyro_z = 9;
inline void IMUAccGyro::clear_gyro_z() {
  gyro_z_ = 0;
}
inline float IMUAccGyro::_internal_gyro_z() const {
  return gyro_z_;
}
inline float IMUAccGyro::gyro_z() const {
  // @@protoc_insertion_point(field_get:pb_viewer.IMUAccGyro.gyro_z)
  return _internal_gyro_z();
}
inline void IMUAccGyro::_internal_set_gyro_z(float value) {
  
  gyro_z_ = value;
}
inline void IMUAccGyro::set_gyro_z(float value) {
  _internal_set_gyro_z(value);
  // @@protoc_insertion_point(field_set:pb_viewer.IMUAccGyro.gyro_z)
}

// -------------------------------------------------------------------

// IMUTemperature

// uint32 device_id = 2;
inline void IMUTemperature::clear_device_id() {
  device_id_ = 0u;
}
inline uint32_t IMUTemperature::_internal_device_id() const {
  return device_id_;
}
inline uint32_t IMUTemperature::device_id() const {
  // @@protoc_insertion_point(field_get:pb_viewer.IMUTemperature.device_id)
  return _internal_device_id();
}
inline void IMUTemperature::_internal_set_device_id(uint32_t value) {
  
  device_id_ = value;
}
inline void IMUTemperature::set_device_id(uint32_t value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:pb_viewer.IMUTemperature.device_id)
}

// uint32 tick = 3;
inline void IMUTemperature::clear_tick() {
  tick_ = 0u;
}
inline uint32_t IMUTemperature::_internal_tick() const {
  return tick_;
}
inline uint32_t IMUTemperature::tick() const {
  // @@protoc_insertion_point(field_get:pb_viewer.IMUTemperature.tick)
  return _internal_tick();
}
inline void IMUTemperature::_internal_set_tick(uint32_t value) {
  
  tick_ = value;
}
inline void IMUTemperature::set_tick(uint32_t value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:pb_viewer.IMUTemperature.tick)
}

// float temperature = 4;
inline void IMUTemperature::clear_temperature() {
  temperature_ = 0;
}
inline float IMUTemperature::_internal_temperature() const {
  return temperature_;
}
inline float IMUTemperature::temperature() const {
  // @@protoc_insertion_point(field_get:pb_viewer.IMUTemperature.temperature)
  return _internal_temperature();
}
inline void IMUTemperature::_internal_set_temperature(float value) {
  
  temperature_ = value;
}
inline void IMUTemperature::set_temperature(float value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:pb_viewer.IMUTemperature.temperature)
}

// -------------------------------------------------------------------

// IMUMagnetometer

// uint32 device_id = 2;
inline void IMUMagnetometer::clear_device_id() {
  device_id_ = 0u;
}
inline uint32_t IMUMagnetometer::_internal_device_id() const {
  return device_id_;
}
inline uint32_t IMUMagnetometer::device_id() const {
  // @@protoc_insertion_point(field_get:pb_viewer.IMUMagnetometer.device_id)
  return _internal_device_id();
}
inline void IMUMagnetometer::_internal_set_device_id(uint32_t value) {
  
  device_id_ = value;
}
inline void IMUMagnetometer::set_device_id(uint32_t value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:pb_viewer.IMUMagnetometer.device_id)
}

// uint32 tick = 3;
inline void IMUMagnetometer::clear_tick() {
  tick_ = 0u;
}
inline uint32_t IMUMagnetometer::_internal_tick() const {
  return tick_;
}
inline uint32_t IMUMagnetometer::tick() const {
  // @@protoc_insertion_point(field_get:pb_viewer.IMUMagnetometer.tick)
  return _internal_tick();
}
inline void IMUMagnetometer::_internal_set_tick(uint32_t value) {
  
  tick_ = value;
}
inline void IMUMagnetometer::set_tick(uint32_t value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:pb_viewer.IMUMagnetometer.tick)
}

// float hx = 4;
inline void IMUMagnetometer::clear_hx() {
  hx_ = 0;
}
inline float IMUMagnetometer::_internal_hx() const {
  return hx_;
}
inline float IMUMagnetometer::hx() const {
  // @@protoc_insertion_point(field_get:pb_viewer.IMUMagnetometer.hx)
  return _internal_hx();
}
inline void IMUMagnetometer::_internal_set_hx(float value) {
  
  hx_ = value;
}
inline void IMUMagnetometer::set_hx(float value) {
  _internal_set_hx(value);
  // @@protoc_insertion_point(field_set:pb_viewer.IMUMagnetometer.hx)
}

// float hy = 5;
inline void IMUMagnetometer::clear_hy() {
  hy_ = 0;
}
inline float IMUMagnetometer::_internal_hy() const {
  return hy_;
}
inline float IMUMagnetometer::hy() const {
  // @@protoc_insertion_point(field_get:pb_viewer.IMUMagnetometer.hy)
  return _internal_hy();
}
inline void IMUMagnetometer::_internal_set_hy(float value) {
  
  hy_ = value;
}
inline void IMUMagnetometer::set_hy(float value) {
  _internal_set_hy(value);
  // @@protoc_insertion_point(field_set:pb_viewer.IMUMagnetometer.hy)
}

// float hz = 6;
inline void IMUMagnetometer::clear_hz() {
  hz_ = 0;
}
inline float IMUMagnetometer::_internal_hz() const {
  return hz_;
}
inline float IMUMagnetometer::hz() const {
  // @@protoc_insertion_point(field_get:pb_viewer.IMUMagnetometer.hz)
  return _internal_hz();
}
inline void IMUMagnetometer::_internal_set_hz(float value) {
  
  hz_ = value;
}
inline void IMUMagnetometer::set_hz(float value) {
  _internal_set_hz(value);
  // @@protoc_insertion_point(field_set:pb_viewer.IMUMagnetometer.hz)
}

// -------------------------------------------------------------------

// Command

// -------------------------------------------------------------------

// Message

// uint32 sequence_id = 1;
inline void Message::clear_sequence_id() {
  sequence_id_ = 0u;
}
inline uint32_t Message::_internal_sequence_id() const {
  return sequence_id_;
}
inline uint32_t Message::sequence_id() const {
  // @@protoc_insertion_point(field_get:pb_viewer.Message.sequence_id)
  return _internal_sequence_id();
}
inline void Message::_internal_set_sequence_id(uint32_t value) {
  
  sequence_id_ = value;
}
inline void Message::set_sequence_id(uint32_t value) {
  _internal_set_sequence_id(value);
  // @@protoc_insertion_point(field_set:pb_viewer.Message.sequence_id)
}

// .pb_viewer.MCUDeviceInfo mcu_device_info = 2;
inline bool Message::_internal_has_mcu_device_info() const {
  return data_case() == kMcuDeviceInfo;
}
inline bool Message::has_mcu_device_info() const {
  return _internal_has_mcu_device_info();
}
inline void Message::set_has_mcu_device_info() {
  _oneof_case_[0] = kMcuDeviceInfo;
}
inline void Message::clear_mcu_device_info() {
  if (_internal_has_mcu_device_info()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.mcu_device_info_;
    }
    clear_has_data();
  }
}
inline ::pb_viewer::MCUDeviceInfo* Message::release_mcu_device_info() {
  // @@protoc_insertion_point(field_release:pb_viewer.Message.mcu_device_info)
  if (_internal_has_mcu_device_info()) {
    clear_has_data();
    ::pb_viewer::MCUDeviceInfo* temp = data_.mcu_device_info_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.mcu_device_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pb_viewer::MCUDeviceInfo& Message::_internal_mcu_device_info() const {
  return _internal_has_mcu_device_info()
      ? *data_.mcu_device_info_
      : reinterpret_cast< ::pb_viewer::MCUDeviceInfo&>(::pb_viewer::_MCUDeviceInfo_default_instance_);
}
inline const ::pb_viewer::MCUDeviceInfo& Message::mcu_device_info() const {
  // @@protoc_insertion_point(field_get:pb_viewer.Message.mcu_device_info)
  return _internal_mcu_device_info();
}
inline ::pb_viewer::MCUDeviceInfo* Message::unsafe_arena_release_mcu_device_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pb_viewer.Message.mcu_device_info)
  if (_internal_has_mcu_device_info()) {
    clear_has_data();
    ::pb_viewer::MCUDeviceInfo* temp = data_.mcu_device_info_;
    data_.mcu_device_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_mcu_device_info(::pb_viewer::MCUDeviceInfo* mcu_device_info) {
  clear_data();
  if (mcu_device_info) {
    set_has_mcu_device_info();
    data_.mcu_device_info_ = mcu_device_info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb_viewer.Message.mcu_device_info)
}
inline ::pb_viewer::MCUDeviceInfo* Message::_internal_mutable_mcu_device_info() {
  if (!_internal_has_mcu_device_info()) {
    clear_data();
    set_has_mcu_device_info();
    data_.mcu_device_info_ = CreateMaybeMessage< ::pb_viewer::MCUDeviceInfo >(GetArenaForAllocation());
  }
  return data_.mcu_device_info_;
}
inline ::pb_viewer::MCUDeviceInfo* Message::mutable_mcu_device_info() {
  ::pb_viewer::MCUDeviceInfo* _msg = _internal_mutable_mcu_device_info();
  // @@protoc_insertion_point(field_mutable:pb_viewer.Message.mcu_device_info)
  return _msg;
}

// .pb_viewer.IMUDeviceInfo imu_device_info = 3;
inline bool Message::_internal_has_imu_device_info() const {
  return data_case() == kImuDeviceInfo;
}
inline bool Message::has_imu_device_info() const {
  return _internal_has_imu_device_info();
}
inline void Message::set_has_imu_device_info() {
  _oneof_case_[0] = kImuDeviceInfo;
}
inline void Message::clear_imu_device_info() {
  if (_internal_has_imu_device_info()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.imu_device_info_;
    }
    clear_has_data();
  }
}
inline ::pb_viewer::IMUDeviceInfo* Message::release_imu_device_info() {
  // @@protoc_insertion_point(field_release:pb_viewer.Message.imu_device_info)
  if (_internal_has_imu_device_info()) {
    clear_has_data();
    ::pb_viewer::IMUDeviceInfo* temp = data_.imu_device_info_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.imu_device_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pb_viewer::IMUDeviceInfo& Message::_internal_imu_device_info() const {
  return _internal_has_imu_device_info()
      ? *data_.imu_device_info_
      : reinterpret_cast< ::pb_viewer::IMUDeviceInfo&>(::pb_viewer::_IMUDeviceInfo_default_instance_);
}
inline const ::pb_viewer::IMUDeviceInfo& Message::imu_device_info() const {
  // @@protoc_insertion_point(field_get:pb_viewer.Message.imu_device_info)
  return _internal_imu_device_info();
}
inline ::pb_viewer::IMUDeviceInfo* Message::unsafe_arena_release_imu_device_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pb_viewer.Message.imu_device_info)
  if (_internal_has_imu_device_info()) {
    clear_has_data();
    ::pb_viewer::IMUDeviceInfo* temp = data_.imu_device_info_;
    data_.imu_device_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_imu_device_info(::pb_viewer::IMUDeviceInfo* imu_device_info) {
  clear_data();
  if (imu_device_info) {
    set_has_imu_device_info();
    data_.imu_device_info_ = imu_device_info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb_viewer.Message.imu_device_info)
}
inline ::pb_viewer::IMUDeviceInfo* Message::_internal_mutable_imu_device_info() {
  if (!_internal_has_imu_device_info()) {
    clear_data();
    set_has_imu_device_info();
    data_.imu_device_info_ = CreateMaybeMessage< ::pb_viewer::IMUDeviceInfo >(GetArenaForAllocation());
  }
  return data_.imu_device_info_;
}
inline ::pb_viewer::IMUDeviceInfo* Message::mutable_imu_device_info() {
  ::pb_viewer::IMUDeviceInfo* _msg = _internal_mutable_imu_device_info();
  // @@protoc_insertion_point(field_mutable:pb_viewer.Message.imu_device_info)
  return _msg;
}

// .pb_viewer.IMUAccGyro imu_acc_gyro = 4;
inline bool Message::_internal_has_imu_acc_gyro() const {
  return data_case() == kImuAccGyro;
}
inline bool Message::has_imu_acc_gyro() const {
  return _internal_has_imu_acc_gyro();
}
inline void Message::set_has_imu_acc_gyro() {
  _oneof_case_[0] = kImuAccGyro;
}
inline void Message::clear_imu_acc_gyro() {
  if (_internal_has_imu_acc_gyro()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.imu_acc_gyro_;
    }
    clear_has_data();
  }
}
inline ::pb_viewer::IMUAccGyro* Message::release_imu_acc_gyro() {
  // @@protoc_insertion_point(field_release:pb_viewer.Message.imu_acc_gyro)
  if (_internal_has_imu_acc_gyro()) {
    clear_has_data();
    ::pb_viewer::IMUAccGyro* temp = data_.imu_acc_gyro_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.imu_acc_gyro_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pb_viewer::IMUAccGyro& Message::_internal_imu_acc_gyro() const {
  return _internal_has_imu_acc_gyro()
      ? *data_.imu_acc_gyro_
      : reinterpret_cast< ::pb_viewer::IMUAccGyro&>(::pb_viewer::_IMUAccGyro_default_instance_);
}
inline const ::pb_viewer::IMUAccGyro& Message::imu_acc_gyro() const {
  // @@protoc_insertion_point(field_get:pb_viewer.Message.imu_acc_gyro)
  return _internal_imu_acc_gyro();
}
inline ::pb_viewer::IMUAccGyro* Message::unsafe_arena_release_imu_acc_gyro() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pb_viewer.Message.imu_acc_gyro)
  if (_internal_has_imu_acc_gyro()) {
    clear_has_data();
    ::pb_viewer::IMUAccGyro* temp = data_.imu_acc_gyro_;
    data_.imu_acc_gyro_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_imu_acc_gyro(::pb_viewer::IMUAccGyro* imu_acc_gyro) {
  clear_data();
  if (imu_acc_gyro) {
    set_has_imu_acc_gyro();
    data_.imu_acc_gyro_ = imu_acc_gyro;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb_viewer.Message.imu_acc_gyro)
}
inline ::pb_viewer::IMUAccGyro* Message::_internal_mutable_imu_acc_gyro() {
  if (!_internal_has_imu_acc_gyro()) {
    clear_data();
    set_has_imu_acc_gyro();
    data_.imu_acc_gyro_ = CreateMaybeMessage< ::pb_viewer::IMUAccGyro >(GetArenaForAllocation());
  }
  return data_.imu_acc_gyro_;
}
inline ::pb_viewer::IMUAccGyro* Message::mutable_imu_acc_gyro() {
  ::pb_viewer::IMUAccGyro* _msg = _internal_mutable_imu_acc_gyro();
  // @@protoc_insertion_point(field_mutable:pb_viewer.Message.imu_acc_gyro)
  return _msg;
}

// .pb_viewer.IMUTemperature imu_temperature = 5;
inline bool Message::_internal_has_imu_temperature() const {
  return data_case() == kImuTemperature;
}
inline bool Message::has_imu_temperature() const {
  return _internal_has_imu_temperature();
}
inline void Message::set_has_imu_temperature() {
  _oneof_case_[0] = kImuTemperature;
}
inline void Message::clear_imu_temperature() {
  if (_internal_has_imu_temperature()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.imu_temperature_;
    }
    clear_has_data();
  }
}
inline ::pb_viewer::IMUTemperature* Message::release_imu_temperature() {
  // @@protoc_insertion_point(field_release:pb_viewer.Message.imu_temperature)
  if (_internal_has_imu_temperature()) {
    clear_has_data();
    ::pb_viewer::IMUTemperature* temp = data_.imu_temperature_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.imu_temperature_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pb_viewer::IMUTemperature& Message::_internal_imu_temperature() const {
  return _internal_has_imu_temperature()
      ? *data_.imu_temperature_
      : reinterpret_cast< ::pb_viewer::IMUTemperature&>(::pb_viewer::_IMUTemperature_default_instance_);
}
inline const ::pb_viewer::IMUTemperature& Message::imu_temperature() const {
  // @@protoc_insertion_point(field_get:pb_viewer.Message.imu_temperature)
  return _internal_imu_temperature();
}
inline ::pb_viewer::IMUTemperature* Message::unsafe_arena_release_imu_temperature() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pb_viewer.Message.imu_temperature)
  if (_internal_has_imu_temperature()) {
    clear_has_data();
    ::pb_viewer::IMUTemperature* temp = data_.imu_temperature_;
    data_.imu_temperature_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_imu_temperature(::pb_viewer::IMUTemperature* imu_temperature) {
  clear_data();
  if (imu_temperature) {
    set_has_imu_temperature();
    data_.imu_temperature_ = imu_temperature;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb_viewer.Message.imu_temperature)
}
inline ::pb_viewer::IMUTemperature* Message::_internal_mutable_imu_temperature() {
  if (!_internal_has_imu_temperature()) {
    clear_data();
    set_has_imu_temperature();
    data_.imu_temperature_ = CreateMaybeMessage< ::pb_viewer::IMUTemperature >(GetArenaForAllocation());
  }
  return data_.imu_temperature_;
}
inline ::pb_viewer::IMUTemperature* Message::mutable_imu_temperature() {
  ::pb_viewer::IMUTemperature* _msg = _internal_mutable_imu_temperature();
  // @@protoc_insertion_point(field_mutable:pb_viewer.Message.imu_temperature)
  return _msg;
}

// .pb_viewer.IMUMagnetometer imu_magnetometer = 6;
inline bool Message::_internal_has_imu_magnetometer() const {
  return data_case() == kImuMagnetometer;
}
inline bool Message::has_imu_magnetometer() const {
  return _internal_has_imu_magnetometer();
}
inline void Message::set_has_imu_magnetometer() {
  _oneof_case_[0] = kImuMagnetometer;
}
inline void Message::clear_imu_magnetometer() {
  if (_internal_has_imu_magnetometer()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.imu_magnetometer_;
    }
    clear_has_data();
  }
}
inline ::pb_viewer::IMUMagnetometer* Message::release_imu_magnetometer() {
  // @@protoc_insertion_point(field_release:pb_viewer.Message.imu_magnetometer)
  if (_internal_has_imu_magnetometer()) {
    clear_has_data();
    ::pb_viewer::IMUMagnetometer* temp = data_.imu_magnetometer_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.imu_magnetometer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pb_viewer::IMUMagnetometer& Message::_internal_imu_magnetometer() const {
  return _internal_has_imu_magnetometer()
      ? *data_.imu_magnetometer_
      : reinterpret_cast< ::pb_viewer::IMUMagnetometer&>(::pb_viewer::_IMUMagnetometer_default_instance_);
}
inline const ::pb_viewer::IMUMagnetometer& Message::imu_magnetometer() const {
  // @@protoc_insertion_point(field_get:pb_viewer.Message.imu_magnetometer)
  return _internal_imu_magnetometer();
}
inline ::pb_viewer::IMUMagnetometer* Message::unsafe_arena_release_imu_magnetometer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pb_viewer.Message.imu_magnetometer)
  if (_internal_has_imu_magnetometer()) {
    clear_has_data();
    ::pb_viewer::IMUMagnetometer* temp = data_.imu_magnetometer_;
    data_.imu_magnetometer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_imu_magnetometer(::pb_viewer::IMUMagnetometer* imu_magnetometer) {
  clear_data();
  if (imu_magnetometer) {
    set_has_imu_magnetometer();
    data_.imu_magnetometer_ = imu_magnetometer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb_viewer.Message.imu_magnetometer)
}
inline ::pb_viewer::IMUMagnetometer* Message::_internal_mutable_imu_magnetometer() {
  if (!_internal_has_imu_magnetometer()) {
    clear_data();
    set_has_imu_magnetometer();
    data_.imu_magnetometer_ = CreateMaybeMessage< ::pb_viewer::IMUMagnetometer >(GetArenaForAllocation());
  }
  return data_.imu_magnetometer_;
}
inline ::pb_viewer::IMUMagnetometer* Message::mutable_imu_magnetometer() {
  ::pb_viewer::IMUMagnetometer* _msg = _internal_mutable_imu_magnetometer();
  // @@protoc_insertion_point(field_mutable:pb_viewer.Message.imu_magnetometer)
  return _msg;
}

inline bool Message::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void Message::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline Message::DataCase Message::data_case() const {
  return Message::DataCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb_viewer

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pb_viewer::IMUAccScale> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb_viewer::IMUAccScale>() {
  return ::pb_viewer::IMUAccScale_descriptor();
}
template <> struct is_proto_enum< ::pb_viewer::IMUGyroScale> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb_viewer::IMUGyroScale>() {
  return ::pb_viewer::IMUGyroScale_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_fake_5fproto_5fserial_2eproto
