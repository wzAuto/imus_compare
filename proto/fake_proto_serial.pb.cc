// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fake_proto_serial.proto

#include "fake_proto_serial.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace pb_viewer {
PROTOBUF_CONSTEXPR MCUDeviceInfo::MCUDeviceInfo(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , ratio_of_tick_to_ns_(0){}
struct MCUDeviceInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MCUDeviceInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MCUDeviceInfoDefaultTypeInternal() {}
  union {
    MCUDeviceInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MCUDeviceInfoDefaultTypeInternal _MCUDeviceInfo_default_instance_;
PROTOBUF_CONSTEXPR IMUDeviceInfo::IMUDeviceInfo(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , device_id_(0u)
  , frequency_(0)
  , acc_scale_(0)

  , gyro_scale_(0)
{}
struct IMUDeviceInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMUDeviceInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMUDeviceInfoDefaultTypeInternal() {}
  union {
    IMUDeviceInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMUDeviceInfoDefaultTypeInternal _IMUDeviceInfo_default_instance_;
PROTOBUF_CONSTEXPR IMUAccGyro::IMUAccGyro(
    ::_pbi::ConstantInitialized)
  : device_id_(0u)
  , tick_(0u)
  , acc_x_(0)
  , acc_y_(0)
  , acc_z_(0)
  , gyro_x_(0)
  , gyro_y_(0)
  , gyro_z_(0){}
struct IMUAccGyroDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMUAccGyroDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMUAccGyroDefaultTypeInternal() {}
  union {
    IMUAccGyro _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMUAccGyroDefaultTypeInternal _IMUAccGyro_default_instance_;
PROTOBUF_CONSTEXPR IMUTemperature::IMUTemperature(
    ::_pbi::ConstantInitialized)
  : device_id_(0u)
  , tick_(0u)
  , temperature_(0){}
struct IMUTemperatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMUTemperatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMUTemperatureDefaultTypeInternal() {}
  union {
    IMUTemperature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMUTemperatureDefaultTypeInternal _IMUTemperature_default_instance_;
PROTOBUF_CONSTEXPR IMUMagnetometer::IMUMagnetometer(
    ::_pbi::ConstantInitialized)
  : device_id_(0u)
  , tick_(0u)
  , hx_(0)
  , hy_(0)
  , hz_(0){}
struct IMUMagnetometerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMUMagnetometerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMUMagnetometerDefaultTypeInternal() {}
  union {
    IMUMagnetometer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMUMagnetometerDefaultTypeInternal _IMUMagnetometer_default_instance_;
PROTOBUF_CONSTEXPR Command::Command(
    ::_pbi::ConstantInitialized){}
struct CommandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandDefaultTypeInternal() {}
  union {
    Command _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandDefaultTypeInternal _Command_default_instance_;
PROTOBUF_CONSTEXPR Message::Message(
    ::_pbi::ConstantInitialized)
  : sequence_id_(0u)
  , _oneof_case_{}{}
struct MessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageDefaultTypeInternal() {}
  union {
    Message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageDefaultTypeInternal _Message_default_instance_;
}  // namespace pb_viewer
static ::_pb::Metadata file_level_metadata_fake_5fproto_5fserial_2eproto[7];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_fake_5fproto_5fserial_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_fake_5fproto_5fserial_2eproto = nullptr;

const uint32_t TableStruct_fake_5fproto_5fserial_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_viewer::MCUDeviceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb_viewer::MCUDeviceInfo, name_),
  PROTOBUF_FIELD_OFFSET(::pb_viewer::MCUDeviceInfo, ratio_of_tick_to_ns_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_viewer::IMUDeviceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb_viewer::IMUDeviceInfo, name_),
  PROTOBUF_FIELD_OFFSET(::pb_viewer::IMUDeviceInfo, device_id_),
  PROTOBUF_FIELD_OFFSET(::pb_viewer::IMUDeviceInfo, frequency_),
  PROTOBUF_FIELD_OFFSET(::pb_viewer::IMUDeviceInfo, acc_scale_),
  PROTOBUF_FIELD_OFFSET(::pb_viewer::IMUDeviceInfo, gyro_scale_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_viewer::IMUAccGyro, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb_viewer::IMUAccGyro, device_id_),
  PROTOBUF_FIELD_OFFSET(::pb_viewer::IMUAccGyro, tick_),
  PROTOBUF_FIELD_OFFSET(::pb_viewer::IMUAccGyro, acc_x_),
  PROTOBUF_FIELD_OFFSET(::pb_viewer::IMUAccGyro, acc_y_),
  PROTOBUF_FIELD_OFFSET(::pb_viewer::IMUAccGyro, acc_z_),
  PROTOBUF_FIELD_OFFSET(::pb_viewer::IMUAccGyro, gyro_x_),
  PROTOBUF_FIELD_OFFSET(::pb_viewer::IMUAccGyro, gyro_y_),
  PROTOBUF_FIELD_OFFSET(::pb_viewer::IMUAccGyro, gyro_z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_viewer::IMUTemperature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb_viewer::IMUTemperature, device_id_),
  PROTOBUF_FIELD_OFFSET(::pb_viewer::IMUTemperature, tick_),
  PROTOBUF_FIELD_OFFSET(::pb_viewer::IMUTemperature, temperature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_viewer::IMUMagnetometer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb_viewer::IMUMagnetometer, device_id_),
  PROTOBUF_FIELD_OFFSET(::pb_viewer::IMUMagnetometer, tick_),
  PROTOBUF_FIELD_OFFSET(::pb_viewer::IMUMagnetometer, hx_),
  PROTOBUF_FIELD_OFFSET(::pb_viewer::IMUMagnetometer, hy_),
  PROTOBUF_FIELD_OFFSET(::pb_viewer::IMUMagnetometer, hz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_viewer::Command, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_viewer::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::pb_viewer::Message, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb_viewer::Message, sequence_id_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::pb_viewer::Message, data_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::pb_viewer::MCUDeviceInfo)},
  { 8, -1, -1, sizeof(::pb_viewer::IMUDeviceInfo)},
  { 19, -1, -1, sizeof(::pb_viewer::IMUAccGyro)},
  { 33, -1, -1, sizeof(::pb_viewer::IMUTemperature)},
  { 42, -1, -1, sizeof(::pb_viewer::IMUMagnetometer)},
  { 53, -1, -1, sizeof(::pb_viewer::Command)},
  { 59, -1, -1, sizeof(::pb_viewer::Message)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::pb_viewer::_MCUDeviceInfo_default_instance_._instance,
  &::pb_viewer::_IMUDeviceInfo_default_instance_._instance,
  &::pb_viewer::_IMUAccGyro_default_instance_._instance,
  &::pb_viewer::_IMUTemperature_default_instance_._instance,
  &::pb_viewer::_IMUMagnetometer_default_instance_._instance,
  &::pb_viewer::_Command_default_instance_._instance,
  &::pb_viewer::_Message_default_instance_._instance,
};

const char descriptor_table_protodef_fake_5fproto_5fserial_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027fake_proto_serial.proto\022\tpb_viewer\":\n\r"
  "MCUDeviceInfo\022\014\n\004name\030\002 \001(\t\022\033\n\023ratio_of_"
  "tick_to_ns\030\003 \001(\002\"\233\001\n\rIMUDeviceInfo\022\014\n\004na"
  "me\030\002 \001(\t\022\021\n\tdevice_id\030\003 \001(\r\022\021\n\tfrequency"
  "\030\004 \001(\002\022)\n\tacc_scale\030\005 \001(\0162\026.pb_viewer.IM"
  "UAccScale\022+\n\ngyro_scale\030\006 \001(\0162\027.pb_viewe"
  "r.IMUGyroScale\"\212\001\n\nIMUAccGyro\022\021\n\tdevice_"
  "id\030\002 \001(\r\022\014\n\004tick\030\003 \001(\r\022\r\n\005acc_x\030\004 \001(\002\022\r\n"
  "\005acc_y\030\005 \001(\002\022\r\n\005acc_z\030\006 \001(\002\022\016\n\006gyro_x\030\007 "
  "\001(\002\022\016\n\006gyro_y\030\010 \001(\002\022\016\n\006gyro_z\030\t \001(\002\"F\n\016I"
  "MUTemperature\022\021\n\tdevice_id\030\002 \001(\r\022\014\n\004tick"
  "\030\003 \001(\r\022\023\n\013temperature\030\004 \001(\002\"V\n\017IMUMagnet"
  "ometer\022\021\n\tdevice_id\030\002 \001(\r\022\014\n\004tick\030\003 \001(\r\022"
  "\n\n\002hx\030\004 \001(\002\022\n\n\002hy\030\005 \001(\002\022\n\n\002hz\030\006 \001(\002\"\t\n\007C"
  "ommand\"\255\002\n\007Message\022\023\n\013sequence_id\030\001 \001(\r\022"
  "3\n\017mcu_device_info\030\002 \001(\0132\030.pb_viewer.MCU"
  "DeviceInfoH\000\0223\n\017imu_device_info\030\003 \001(\0132\030."
  "pb_viewer.IMUDeviceInfoH\000\022-\n\014imu_acc_gyr"
  "o\030\004 \001(\0132\025.pb_viewer.IMUAccGyroH\000\0224\n\017imu_"
  "temperature\030\005 \001(\0132\031.pb_viewer.IMUTempera"
  "tureH\000\0226\n\020imu_magnetometer\030\006 \001(\0132\032.pb_vi"
  "ewer.IMUMagnetometerH\000B\006\n\004data*2\n\013IMUAcc"
  "Scale\022\007\n\003G_2\020\000\022\007\n\003G_4\020\001\022\007\n\003G_8\020\002\022\010\n\004G_16"
  "\020\003*Q\n\014IMUGyroScale\022\013\n\007DPS_125\020\000\022\013\n\007DPS_2"
  "50\020\001\022\013\n\007DPS_500\020\002\022\014\n\010DPS_1000\020\003\022\014\n\010DPS_2"
  "000\020\004b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_fake_5fproto_5fserial_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_fake_5fproto_5fserial_2eproto = {
    false, false, 1013, descriptor_table_protodef_fake_5fproto_5fserial_2eproto,
    "fake_proto_serial.proto",
    &descriptor_table_fake_5fproto_5fserial_2eproto_once, nullptr, 0, 7,
    schemas, file_default_instances, TableStruct_fake_5fproto_5fserial_2eproto::offsets,
    file_level_metadata_fake_5fproto_5fserial_2eproto, file_level_enum_descriptors_fake_5fproto_5fserial_2eproto,
    file_level_service_descriptors_fake_5fproto_5fserial_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_fake_5fproto_5fserial_2eproto_getter() {
  return &descriptor_table_fake_5fproto_5fserial_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_fake_5fproto_5fserial_2eproto(&descriptor_table_fake_5fproto_5fserial_2eproto);
namespace pb_viewer {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IMUAccScale_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_fake_5fproto_5fserial_2eproto);
  return file_level_enum_descriptors_fake_5fproto_5fserial_2eproto[0];
}
bool IMUAccScale_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IMUGyroScale_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_fake_5fproto_5fserial_2eproto);
  return file_level_enum_descriptors_fake_5fproto_5fserial_2eproto[1];
}
bool IMUGyroScale_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class MCUDeviceInfo::_Internal {
 public:
};

MCUDeviceInfo::MCUDeviceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:pb_viewer.MCUDeviceInfo)
}
MCUDeviceInfo::MCUDeviceInfo(const MCUDeviceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  ratio_of_tick_to_ns_ = from.ratio_of_tick_to_ns_;
  // @@protoc_insertion_point(copy_constructor:pb_viewer.MCUDeviceInfo)
}

inline void MCUDeviceInfo::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ratio_of_tick_to_ns_ = 0;
}

MCUDeviceInfo::~MCUDeviceInfo() {
  // @@protoc_insertion_point(destructor:pb_viewer.MCUDeviceInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MCUDeviceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
}

void MCUDeviceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MCUDeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_viewer.MCUDeviceInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ratio_of_tick_to_ns_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MCUDeviceInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pb_viewer.MCUDeviceInfo.name"));
        } else
          goto handle_unusual;
        continue;
      // float ratio_of_tick_to_ns = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          ratio_of_tick_to_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MCUDeviceInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_viewer.MCUDeviceInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb_viewer.MCUDeviceInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // float ratio_of_tick_to_ns = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ratio_of_tick_to_ns = this->_internal_ratio_of_tick_to_ns();
  uint32_t raw_ratio_of_tick_to_ns;
  memcpy(&raw_ratio_of_tick_to_ns, &tmp_ratio_of_tick_to_ns, sizeof(tmp_ratio_of_tick_to_ns));
  if (raw_ratio_of_tick_to_ns != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_ratio_of_tick_to_ns(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_viewer.MCUDeviceInfo)
  return target;
}

size_t MCUDeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_viewer.MCUDeviceInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // float ratio_of_tick_to_ns = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ratio_of_tick_to_ns = this->_internal_ratio_of_tick_to_ns();
  uint32_t raw_ratio_of_tick_to_ns;
  memcpy(&raw_ratio_of_tick_to_ns, &tmp_ratio_of_tick_to_ns, sizeof(tmp_ratio_of_tick_to_ns));
  if (raw_ratio_of_tick_to_ns != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MCUDeviceInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MCUDeviceInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MCUDeviceInfo::GetClassData() const { return &_class_data_; }

void MCUDeviceInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MCUDeviceInfo *>(to)->MergeFrom(
      static_cast<const MCUDeviceInfo &>(from));
}


void MCUDeviceInfo::MergeFrom(const MCUDeviceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_viewer.MCUDeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ratio_of_tick_to_ns = from._internal_ratio_of_tick_to_ns();
  uint32_t raw_ratio_of_tick_to_ns;
  memcpy(&raw_ratio_of_tick_to_ns, &tmp_ratio_of_tick_to_ns, sizeof(tmp_ratio_of_tick_to_ns));
  if (raw_ratio_of_tick_to_ns != 0) {
    _internal_set_ratio_of_tick_to_ns(from._internal_ratio_of_tick_to_ns());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MCUDeviceInfo::CopyFrom(const MCUDeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_viewer.MCUDeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MCUDeviceInfo::IsInitialized() const {
  return true;
}

void MCUDeviceInfo::InternalSwap(MCUDeviceInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(ratio_of_tick_to_ns_, other->ratio_of_tick_to_ns_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MCUDeviceInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fake_5fproto_5fserial_2eproto_getter, &descriptor_table_fake_5fproto_5fserial_2eproto_once,
      file_level_metadata_fake_5fproto_5fserial_2eproto[0]);
}

// ===================================================================

class IMUDeviceInfo::_Internal {
 public:
};

IMUDeviceInfo::IMUDeviceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:pb_viewer.IMUDeviceInfo)
}
IMUDeviceInfo::IMUDeviceInfo(const IMUDeviceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&device_id_, &from.device_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&gyro_scale_) -
    reinterpret_cast<char*>(&device_id_)) + sizeof(gyro_scale_));
  // @@protoc_insertion_point(copy_constructor:pb_viewer.IMUDeviceInfo)
}

inline void IMUDeviceInfo::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&device_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&gyro_scale_) -
    reinterpret_cast<char*>(&device_id_)) + sizeof(gyro_scale_));
}

IMUDeviceInfo::~IMUDeviceInfo() {
  // @@protoc_insertion_point(destructor:pb_viewer.IMUDeviceInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMUDeviceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
}

void IMUDeviceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMUDeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_viewer.IMUDeviceInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&device_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gyro_scale_) -
      reinterpret_cast<char*>(&device_id_)) + sizeof(gyro_scale_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IMUDeviceInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pb_viewer.IMUDeviceInfo.name"));
        } else
          goto handle_unusual;
        continue;
      // uint32 device_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          device_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float frequency = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .pb_viewer.IMUAccScale acc_scale = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_acc_scale(static_cast<::pb_viewer::IMUAccScale>(val));
        } else
          goto handle_unusual;
        continue;
      // .pb_viewer.IMUGyroScale gyro_scale = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_gyro_scale(static_cast<::pb_viewer::IMUGyroScale>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMUDeviceInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_viewer.IMUDeviceInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb_viewer.IMUDeviceInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // uint32 device_id = 3;
  if (this->_internal_device_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_device_id(), target);
  }

  // float frequency = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_frequency = this->_internal_frequency();
  uint32_t raw_frequency;
  memcpy(&raw_frequency, &tmp_frequency, sizeof(tmp_frequency));
  if (raw_frequency != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_frequency(), target);
  }

  // .pb_viewer.IMUAccScale acc_scale = 5;
  if (this->_internal_acc_scale() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_acc_scale(), target);
  }

  // .pb_viewer.IMUGyroScale gyro_scale = 6;
  if (this->_internal_gyro_scale() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_gyro_scale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_viewer.IMUDeviceInfo)
  return target;
}

size_t IMUDeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_viewer.IMUDeviceInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 device_id = 3;
  if (this->_internal_device_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_device_id());
  }

  // float frequency = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_frequency = this->_internal_frequency();
  uint32_t raw_frequency;
  memcpy(&raw_frequency, &tmp_frequency, sizeof(tmp_frequency));
  if (raw_frequency != 0) {
    total_size += 1 + 4;
  }

  // .pb_viewer.IMUAccScale acc_scale = 5;
  if (this->_internal_acc_scale() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_acc_scale());
  }

  // .pb_viewer.IMUGyroScale gyro_scale = 6;
  if (this->_internal_gyro_scale() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_gyro_scale());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IMUDeviceInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IMUDeviceInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IMUDeviceInfo::GetClassData() const { return &_class_data_; }

void IMUDeviceInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IMUDeviceInfo *>(to)->MergeFrom(
      static_cast<const IMUDeviceInfo &>(from));
}


void IMUDeviceInfo::MergeFrom(const IMUDeviceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_viewer.IMUDeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_device_id() != 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_frequency = from._internal_frequency();
  uint32_t raw_frequency;
  memcpy(&raw_frequency, &tmp_frequency, sizeof(tmp_frequency));
  if (raw_frequency != 0) {
    _internal_set_frequency(from._internal_frequency());
  }
  if (from._internal_acc_scale() != 0) {
    _internal_set_acc_scale(from._internal_acc_scale());
  }
  if (from._internal_gyro_scale() != 0) {
    _internal_set_gyro_scale(from._internal_gyro_scale());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IMUDeviceInfo::CopyFrom(const IMUDeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_viewer.IMUDeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUDeviceInfo::IsInitialized() const {
  return true;
}

void IMUDeviceInfo::InternalSwap(IMUDeviceInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMUDeviceInfo, gyro_scale_)
      + sizeof(IMUDeviceInfo::gyro_scale_)
      - PROTOBUF_FIELD_OFFSET(IMUDeviceInfo, device_id_)>(
          reinterpret_cast<char*>(&device_id_),
          reinterpret_cast<char*>(&other->device_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IMUDeviceInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fake_5fproto_5fserial_2eproto_getter, &descriptor_table_fake_5fproto_5fserial_2eproto_once,
      file_level_metadata_fake_5fproto_5fserial_2eproto[1]);
}

// ===================================================================

class IMUAccGyro::_Internal {
 public:
};

IMUAccGyro::IMUAccGyro(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:pb_viewer.IMUAccGyro)
}
IMUAccGyro::IMUAccGyro(const IMUAccGyro& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&device_id_, &from.device_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&gyro_z_) -
    reinterpret_cast<char*>(&device_id_)) + sizeof(gyro_z_));
  // @@protoc_insertion_point(copy_constructor:pb_viewer.IMUAccGyro)
}

inline void IMUAccGyro::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&device_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&gyro_z_) -
    reinterpret_cast<char*>(&device_id_)) + sizeof(gyro_z_));
}

IMUAccGyro::~IMUAccGyro() {
  // @@protoc_insertion_point(destructor:pb_viewer.IMUAccGyro)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMUAccGyro::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IMUAccGyro::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMUAccGyro::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_viewer.IMUAccGyro)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&device_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gyro_z_) -
      reinterpret_cast<char*>(&device_id_)) + sizeof(gyro_z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IMUAccGyro::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 device_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          device_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 tick = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float acc_x = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          acc_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float acc_y = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          acc_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float acc_z = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          acc_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float gyro_x = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          gyro_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float gyro_y = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          gyro_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float gyro_z = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          gyro_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMUAccGyro::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_viewer.IMUAccGyro)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 device_id = 2;
  if (this->_internal_device_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_device_id(), target);
  }

  // uint32 tick = 3;
  if (this->_internal_tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tick(), target);
  }

  // float acc_x = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_acc_x = this->_internal_acc_x();
  uint32_t raw_acc_x;
  memcpy(&raw_acc_x, &tmp_acc_x, sizeof(tmp_acc_x));
  if (raw_acc_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_acc_x(), target);
  }

  // float acc_y = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_acc_y = this->_internal_acc_y();
  uint32_t raw_acc_y;
  memcpy(&raw_acc_y, &tmp_acc_y, sizeof(tmp_acc_y));
  if (raw_acc_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_acc_y(), target);
  }

  // float acc_z = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_acc_z = this->_internal_acc_z();
  uint32_t raw_acc_z;
  memcpy(&raw_acc_z, &tmp_acc_z, sizeof(tmp_acc_z));
  if (raw_acc_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_acc_z(), target);
  }

  // float gyro_x = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gyro_x = this->_internal_gyro_x();
  uint32_t raw_gyro_x;
  memcpy(&raw_gyro_x, &tmp_gyro_x, sizeof(tmp_gyro_x));
  if (raw_gyro_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_gyro_x(), target);
  }

  // float gyro_y = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gyro_y = this->_internal_gyro_y();
  uint32_t raw_gyro_y;
  memcpy(&raw_gyro_y, &tmp_gyro_y, sizeof(tmp_gyro_y));
  if (raw_gyro_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_gyro_y(), target);
  }

  // float gyro_z = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gyro_z = this->_internal_gyro_z();
  uint32_t raw_gyro_z;
  memcpy(&raw_gyro_z, &tmp_gyro_z, sizeof(tmp_gyro_z));
  if (raw_gyro_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_gyro_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_viewer.IMUAccGyro)
  return target;
}

size_t IMUAccGyro::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_viewer.IMUAccGyro)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 device_id = 2;
  if (this->_internal_device_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_device_id());
  }

  // uint32 tick = 3;
  if (this->_internal_tick() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tick());
  }

  // float acc_x = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_acc_x = this->_internal_acc_x();
  uint32_t raw_acc_x;
  memcpy(&raw_acc_x, &tmp_acc_x, sizeof(tmp_acc_x));
  if (raw_acc_x != 0) {
    total_size += 1 + 4;
  }

  // float acc_y = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_acc_y = this->_internal_acc_y();
  uint32_t raw_acc_y;
  memcpy(&raw_acc_y, &tmp_acc_y, sizeof(tmp_acc_y));
  if (raw_acc_y != 0) {
    total_size += 1 + 4;
  }

  // float acc_z = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_acc_z = this->_internal_acc_z();
  uint32_t raw_acc_z;
  memcpy(&raw_acc_z, &tmp_acc_z, sizeof(tmp_acc_z));
  if (raw_acc_z != 0) {
    total_size += 1 + 4;
  }

  // float gyro_x = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gyro_x = this->_internal_gyro_x();
  uint32_t raw_gyro_x;
  memcpy(&raw_gyro_x, &tmp_gyro_x, sizeof(tmp_gyro_x));
  if (raw_gyro_x != 0) {
    total_size += 1 + 4;
  }

  // float gyro_y = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gyro_y = this->_internal_gyro_y();
  uint32_t raw_gyro_y;
  memcpy(&raw_gyro_y, &tmp_gyro_y, sizeof(tmp_gyro_y));
  if (raw_gyro_y != 0) {
    total_size += 1 + 4;
  }

  // float gyro_z = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gyro_z = this->_internal_gyro_z();
  uint32_t raw_gyro_z;
  memcpy(&raw_gyro_z, &tmp_gyro_z, sizeof(tmp_gyro_z));
  if (raw_gyro_z != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IMUAccGyro::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IMUAccGyro::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IMUAccGyro::GetClassData() const { return &_class_data_; }

void IMUAccGyro::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IMUAccGyro *>(to)->MergeFrom(
      static_cast<const IMUAccGyro &>(from));
}


void IMUAccGyro::MergeFrom(const IMUAccGyro& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_viewer.IMUAccGyro)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_device_id() != 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from._internal_tick() != 0) {
    _internal_set_tick(from._internal_tick());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_acc_x = from._internal_acc_x();
  uint32_t raw_acc_x;
  memcpy(&raw_acc_x, &tmp_acc_x, sizeof(tmp_acc_x));
  if (raw_acc_x != 0) {
    _internal_set_acc_x(from._internal_acc_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_acc_y = from._internal_acc_y();
  uint32_t raw_acc_y;
  memcpy(&raw_acc_y, &tmp_acc_y, sizeof(tmp_acc_y));
  if (raw_acc_y != 0) {
    _internal_set_acc_y(from._internal_acc_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_acc_z = from._internal_acc_z();
  uint32_t raw_acc_z;
  memcpy(&raw_acc_z, &tmp_acc_z, sizeof(tmp_acc_z));
  if (raw_acc_z != 0) {
    _internal_set_acc_z(from._internal_acc_z());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gyro_x = from._internal_gyro_x();
  uint32_t raw_gyro_x;
  memcpy(&raw_gyro_x, &tmp_gyro_x, sizeof(tmp_gyro_x));
  if (raw_gyro_x != 0) {
    _internal_set_gyro_x(from._internal_gyro_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gyro_y = from._internal_gyro_y();
  uint32_t raw_gyro_y;
  memcpy(&raw_gyro_y, &tmp_gyro_y, sizeof(tmp_gyro_y));
  if (raw_gyro_y != 0) {
    _internal_set_gyro_y(from._internal_gyro_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gyro_z = from._internal_gyro_z();
  uint32_t raw_gyro_z;
  memcpy(&raw_gyro_z, &tmp_gyro_z, sizeof(tmp_gyro_z));
  if (raw_gyro_z != 0) {
    _internal_set_gyro_z(from._internal_gyro_z());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IMUAccGyro::CopyFrom(const IMUAccGyro& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_viewer.IMUAccGyro)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUAccGyro::IsInitialized() const {
  return true;
}

void IMUAccGyro::InternalSwap(IMUAccGyro* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMUAccGyro, gyro_z_)
      + sizeof(IMUAccGyro::gyro_z_)
      - PROTOBUF_FIELD_OFFSET(IMUAccGyro, device_id_)>(
          reinterpret_cast<char*>(&device_id_),
          reinterpret_cast<char*>(&other->device_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IMUAccGyro::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fake_5fproto_5fserial_2eproto_getter, &descriptor_table_fake_5fproto_5fserial_2eproto_once,
      file_level_metadata_fake_5fproto_5fserial_2eproto[2]);
}

// ===================================================================

class IMUTemperature::_Internal {
 public:
};

IMUTemperature::IMUTemperature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:pb_viewer.IMUTemperature)
}
IMUTemperature::IMUTemperature(const IMUTemperature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&device_id_, &from.device_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&temperature_) -
    reinterpret_cast<char*>(&device_id_)) + sizeof(temperature_));
  // @@protoc_insertion_point(copy_constructor:pb_viewer.IMUTemperature)
}

inline void IMUTemperature::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&device_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&temperature_) -
    reinterpret_cast<char*>(&device_id_)) + sizeof(temperature_));
}

IMUTemperature::~IMUTemperature() {
  // @@protoc_insertion_point(destructor:pb_viewer.IMUTemperature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMUTemperature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IMUTemperature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMUTemperature::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_viewer.IMUTemperature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&device_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&temperature_) -
      reinterpret_cast<char*>(&device_id_)) + sizeof(temperature_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IMUTemperature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 device_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          device_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 tick = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float temperature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMUTemperature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_viewer.IMUTemperature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 device_id = 2;
  if (this->_internal_device_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_device_id(), target);
  }

  // uint32 tick = 3;
  if (this->_internal_tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tick(), target);
  }

  // float temperature = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_temperature = this->_internal_temperature();
  uint32_t raw_temperature;
  memcpy(&raw_temperature, &tmp_temperature, sizeof(tmp_temperature));
  if (raw_temperature != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_temperature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_viewer.IMUTemperature)
  return target;
}

size_t IMUTemperature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_viewer.IMUTemperature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 device_id = 2;
  if (this->_internal_device_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_device_id());
  }

  // uint32 tick = 3;
  if (this->_internal_tick() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tick());
  }

  // float temperature = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_temperature = this->_internal_temperature();
  uint32_t raw_temperature;
  memcpy(&raw_temperature, &tmp_temperature, sizeof(tmp_temperature));
  if (raw_temperature != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IMUTemperature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IMUTemperature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IMUTemperature::GetClassData() const { return &_class_data_; }

void IMUTemperature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IMUTemperature *>(to)->MergeFrom(
      static_cast<const IMUTemperature &>(from));
}


void IMUTemperature::MergeFrom(const IMUTemperature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_viewer.IMUTemperature)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_device_id() != 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from._internal_tick() != 0) {
    _internal_set_tick(from._internal_tick());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_temperature = from._internal_temperature();
  uint32_t raw_temperature;
  memcpy(&raw_temperature, &tmp_temperature, sizeof(tmp_temperature));
  if (raw_temperature != 0) {
    _internal_set_temperature(from._internal_temperature());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IMUTemperature::CopyFrom(const IMUTemperature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_viewer.IMUTemperature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUTemperature::IsInitialized() const {
  return true;
}

void IMUTemperature::InternalSwap(IMUTemperature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMUTemperature, temperature_)
      + sizeof(IMUTemperature::temperature_)
      - PROTOBUF_FIELD_OFFSET(IMUTemperature, device_id_)>(
          reinterpret_cast<char*>(&device_id_),
          reinterpret_cast<char*>(&other->device_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IMUTemperature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fake_5fproto_5fserial_2eproto_getter, &descriptor_table_fake_5fproto_5fserial_2eproto_once,
      file_level_metadata_fake_5fproto_5fserial_2eproto[3]);
}

// ===================================================================

class IMUMagnetometer::_Internal {
 public:
};

IMUMagnetometer::IMUMagnetometer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:pb_viewer.IMUMagnetometer)
}
IMUMagnetometer::IMUMagnetometer(const IMUMagnetometer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&device_id_, &from.device_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&hz_) -
    reinterpret_cast<char*>(&device_id_)) + sizeof(hz_));
  // @@protoc_insertion_point(copy_constructor:pb_viewer.IMUMagnetometer)
}

inline void IMUMagnetometer::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&device_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hz_) -
    reinterpret_cast<char*>(&device_id_)) + sizeof(hz_));
}

IMUMagnetometer::~IMUMagnetometer() {
  // @@protoc_insertion_point(destructor:pb_viewer.IMUMagnetometer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMUMagnetometer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IMUMagnetometer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMUMagnetometer::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_viewer.IMUMagnetometer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&device_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hz_) -
      reinterpret_cast<char*>(&device_id_)) + sizeof(hz_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IMUMagnetometer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 device_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          device_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 tick = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float hx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          hx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float hy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          hy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float hz = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMUMagnetometer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_viewer.IMUMagnetometer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 device_id = 2;
  if (this->_internal_device_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_device_id(), target);
  }

  // uint32 tick = 3;
  if (this->_internal_tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tick(), target);
  }

  // float hx = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hx = this->_internal_hx();
  uint32_t raw_hx;
  memcpy(&raw_hx, &tmp_hx, sizeof(tmp_hx));
  if (raw_hx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_hx(), target);
  }

  // float hy = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hy = this->_internal_hy();
  uint32_t raw_hy;
  memcpy(&raw_hy, &tmp_hy, sizeof(tmp_hy));
  if (raw_hy != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_hy(), target);
  }

  // float hz = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hz = this->_internal_hz();
  uint32_t raw_hz;
  memcpy(&raw_hz, &tmp_hz, sizeof(tmp_hz));
  if (raw_hz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_viewer.IMUMagnetometer)
  return target;
}

size_t IMUMagnetometer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_viewer.IMUMagnetometer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 device_id = 2;
  if (this->_internal_device_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_device_id());
  }

  // uint32 tick = 3;
  if (this->_internal_tick() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tick());
  }

  // float hx = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hx = this->_internal_hx();
  uint32_t raw_hx;
  memcpy(&raw_hx, &tmp_hx, sizeof(tmp_hx));
  if (raw_hx != 0) {
    total_size += 1 + 4;
  }

  // float hy = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hy = this->_internal_hy();
  uint32_t raw_hy;
  memcpy(&raw_hy, &tmp_hy, sizeof(tmp_hy));
  if (raw_hy != 0) {
    total_size += 1 + 4;
  }

  // float hz = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hz = this->_internal_hz();
  uint32_t raw_hz;
  memcpy(&raw_hz, &tmp_hz, sizeof(tmp_hz));
  if (raw_hz != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IMUMagnetometer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IMUMagnetometer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IMUMagnetometer::GetClassData() const { return &_class_data_; }

void IMUMagnetometer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IMUMagnetometer *>(to)->MergeFrom(
      static_cast<const IMUMagnetometer &>(from));
}


void IMUMagnetometer::MergeFrom(const IMUMagnetometer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_viewer.IMUMagnetometer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_device_id() != 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from._internal_tick() != 0) {
    _internal_set_tick(from._internal_tick());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hx = from._internal_hx();
  uint32_t raw_hx;
  memcpy(&raw_hx, &tmp_hx, sizeof(tmp_hx));
  if (raw_hx != 0) {
    _internal_set_hx(from._internal_hx());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hy = from._internal_hy();
  uint32_t raw_hy;
  memcpy(&raw_hy, &tmp_hy, sizeof(tmp_hy));
  if (raw_hy != 0) {
    _internal_set_hy(from._internal_hy());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hz = from._internal_hz();
  uint32_t raw_hz;
  memcpy(&raw_hz, &tmp_hz, sizeof(tmp_hz));
  if (raw_hz != 0) {
    _internal_set_hz(from._internal_hz());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IMUMagnetometer::CopyFrom(const IMUMagnetometer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_viewer.IMUMagnetometer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUMagnetometer::IsInitialized() const {
  return true;
}

void IMUMagnetometer::InternalSwap(IMUMagnetometer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMUMagnetometer, hz_)
      + sizeof(IMUMagnetometer::hz_)
      - PROTOBUF_FIELD_OFFSET(IMUMagnetometer, device_id_)>(
          reinterpret_cast<char*>(&device_id_),
          reinterpret_cast<char*>(&other->device_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IMUMagnetometer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fake_5fproto_5fserial_2eproto_getter, &descriptor_table_fake_5fproto_5fserial_2eproto_once,
      file_level_metadata_fake_5fproto_5fserial_2eproto[4]);
}

// ===================================================================

class Command::_Internal {
 public:
};

Command::Command(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:pb_viewer.Command)
}
Command::Command(const Command& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb_viewer.Command)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Command::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fake_5fproto_5fserial_2eproto_getter, &descriptor_table_fake_5fproto_5fserial_2eproto_once,
      file_level_metadata_fake_5fproto_5fserial_2eproto[5]);
}

// ===================================================================

class Message::_Internal {
 public:
  static const ::pb_viewer::MCUDeviceInfo& mcu_device_info(const Message* msg);
  static const ::pb_viewer::IMUDeviceInfo& imu_device_info(const Message* msg);
  static const ::pb_viewer::IMUAccGyro& imu_acc_gyro(const Message* msg);
  static const ::pb_viewer::IMUTemperature& imu_temperature(const Message* msg);
  static const ::pb_viewer::IMUMagnetometer& imu_magnetometer(const Message* msg);
};

const ::pb_viewer::MCUDeviceInfo&
Message::_Internal::mcu_device_info(const Message* msg) {
  return *msg->data_.mcu_device_info_;
}
const ::pb_viewer::IMUDeviceInfo&
Message::_Internal::imu_device_info(const Message* msg) {
  return *msg->data_.imu_device_info_;
}
const ::pb_viewer::IMUAccGyro&
Message::_Internal::imu_acc_gyro(const Message* msg) {
  return *msg->data_.imu_acc_gyro_;
}
const ::pb_viewer::IMUTemperature&
Message::_Internal::imu_temperature(const Message* msg) {
  return *msg->data_.imu_temperature_;
}
const ::pb_viewer::IMUMagnetometer&
Message::_Internal::imu_magnetometer(const Message* msg) {
  return *msg->data_.imu_magnetometer_;
}
void Message::set_allocated_mcu_device_info(::pb_viewer::MCUDeviceInfo* mcu_device_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (mcu_device_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mcu_device_info);
    if (message_arena != submessage_arena) {
      mcu_device_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mcu_device_info, submessage_arena);
    }
    set_has_mcu_device_info();
    data_.mcu_device_info_ = mcu_device_info;
  }
  // @@protoc_insertion_point(field_set_allocated:pb_viewer.Message.mcu_device_info)
}
void Message::set_allocated_imu_device_info(::pb_viewer::IMUDeviceInfo* imu_device_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (imu_device_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(imu_device_info);
    if (message_arena != submessage_arena) {
      imu_device_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imu_device_info, submessage_arena);
    }
    set_has_imu_device_info();
    data_.imu_device_info_ = imu_device_info;
  }
  // @@protoc_insertion_point(field_set_allocated:pb_viewer.Message.imu_device_info)
}
void Message::set_allocated_imu_acc_gyro(::pb_viewer::IMUAccGyro* imu_acc_gyro) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (imu_acc_gyro) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(imu_acc_gyro);
    if (message_arena != submessage_arena) {
      imu_acc_gyro = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imu_acc_gyro, submessage_arena);
    }
    set_has_imu_acc_gyro();
    data_.imu_acc_gyro_ = imu_acc_gyro;
  }
  // @@protoc_insertion_point(field_set_allocated:pb_viewer.Message.imu_acc_gyro)
}
void Message::set_allocated_imu_temperature(::pb_viewer::IMUTemperature* imu_temperature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (imu_temperature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(imu_temperature);
    if (message_arena != submessage_arena) {
      imu_temperature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imu_temperature, submessage_arena);
    }
    set_has_imu_temperature();
    data_.imu_temperature_ = imu_temperature;
  }
  // @@protoc_insertion_point(field_set_allocated:pb_viewer.Message.imu_temperature)
}
void Message::set_allocated_imu_magnetometer(::pb_viewer::IMUMagnetometer* imu_magnetometer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (imu_magnetometer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(imu_magnetometer);
    if (message_arena != submessage_arena) {
      imu_magnetometer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imu_magnetometer, submessage_arena);
    }
    set_has_imu_magnetometer();
    data_.imu_magnetometer_ = imu_magnetometer;
  }
  // @@protoc_insertion_point(field_set_allocated:pb_viewer.Message.imu_magnetometer)
}
Message::Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:pb_viewer.Message)
}
Message::Message(const Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sequence_id_ = from.sequence_id_;
  clear_has_data();
  switch (from.data_case()) {
    case kMcuDeviceInfo: {
      _internal_mutable_mcu_device_info()->::pb_viewer::MCUDeviceInfo::MergeFrom(from._internal_mcu_device_info());
      break;
    }
    case kImuDeviceInfo: {
      _internal_mutable_imu_device_info()->::pb_viewer::IMUDeviceInfo::MergeFrom(from._internal_imu_device_info());
      break;
    }
    case kImuAccGyro: {
      _internal_mutable_imu_acc_gyro()->::pb_viewer::IMUAccGyro::MergeFrom(from._internal_imu_acc_gyro());
      break;
    }
    case kImuTemperature: {
      _internal_mutable_imu_temperature()->::pb_viewer::IMUTemperature::MergeFrom(from._internal_imu_temperature());
      break;
    }
    case kImuMagnetometer: {
      _internal_mutable_imu_magnetometer()->::pb_viewer::IMUMagnetometer::MergeFrom(from._internal_imu_magnetometer());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:pb_viewer.Message)
}

inline void Message::SharedCtor() {
sequence_id_ = 0u;
clear_has_data();
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:pb_viewer.Message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_data()) {
    clear_data();
  }
}

void Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Message::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:pb_viewer.Message)
  switch (data_case()) {
    case kMcuDeviceInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.mcu_device_info_;
      }
      break;
    }
    case kImuDeviceInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.imu_device_info_;
      }
      break;
    }
    case kImuAccGyro: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.imu_acc_gyro_;
      }
      break;
    }
    case kImuTemperature: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.imu_temperature_;
      }
      break;
    }
    case kImuMagnetometer: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.imu_magnetometer_;
      }
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_viewer.Message)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sequence_id_ = 0u;
  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 sequence_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          sequence_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .pb_viewer.MCUDeviceInfo mcu_device_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mcu_device_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .pb_viewer.IMUDeviceInfo imu_device_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_imu_device_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .pb_viewer.IMUAccGyro imu_acc_gyro = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_imu_acc_gyro(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .pb_viewer.IMUTemperature imu_temperature = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_imu_temperature(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .pb_viewer.IMUMagnetometer imu_magnetometer = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_imu_magnetometer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_viewer.Message)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sequence_id = 1;
  if (this->_internal_sequence_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sequence_id(), target);
  }

  // .pb_viewer.MCUDeviceInfo mcu_device_info = 2;
  if (_internal_has_mcu_device_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::mcu_device_info(this),
        _Internal::mcu_device_info(this).GetCachedSize(), target, stream);
  }

  // .pb_viewer.IMUDeviceInfo imu_device_info = 3;
  if (_internal_has_imu_device_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::imu_device_info(this),
        _Internal::imu_device_info(this).GetCachedSize(), target, stream);
  }

  // .pb_viewer.IMUAccGyro imu_acc_gyro = 4;
  if (_internal_has_imu_acc_gyro()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::imu_acc_gyro(this),
        _Internal::imu_acc_gyro(this).GetCachedSize(), target, stream);
  }

  // .pb_viewer.IMUTemperature imu_temperature = 5;
  if (_internal_has_imu_temperature()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::imu_temperature(this),
        _Internal::imu_temperature(this).GetCachedSize(), target, stream);
  }

  // .pb_viewer.IMUMagnetometer imu_magnetometer = 6;
  if (_internal_has_imu_magnetometer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::imu_magnetometer(this),
        _Internal::imu_magnetometer(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_viewer.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_viewer.Message)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 sequence_id = 1;
  if (this->_internal_sequence_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sequence_id());
  }

  switch (data_case()) {
    // .pb_viewer.MCUDeviceInfo mcu_device_info = 2;
    case kMcuDeviceInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.mcu_device_info_);
      break;
    }
    // .pb_viewer.IMUDeviceInfo imu_device_info = 3;
    case kImuDeviceInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.imu_device_info_);
      break;
    }
    // .pb_viewer.IMUAccGyro imu_acc_gyro = 4;
    case kImuAccGyro: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.imu_acc_gyro_);
      break;
    }
    // .pb_viewer.IMUTemperature imu_temperature = 5;
    case kImuTemperature: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.imu_temperature_);
      break;
    }
    // .pb_viewer.IMUMagnetometer imu_magnetometer = 6;
    case kImuMagnetometer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.imu_magnetometer_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message::GetClassData() const { return &_class_data_; }

void Message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Message *>(to)->MergeFrom(
      static_cast<const Message &>(from));
}


void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_viewer.Message)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_sequence_id() != 0) {
    _internal_set_sequence_id(from._internal_sequence_id());
  }
  switch (from.data_case()) {
    case kMcuDeviceInfo: {
      _internal_mutable_mcu_device_info()->::pb_viewer::MCUDeviceInfo::MergeFrom(from._internal_mcu_device_info());
      break;
    }
    case kImuDeviceInfo: {
      _internal_mutable_imu_device_info()->::pb_viewer::IMUDeviceInfo::MergeFrom(from._internal_imu_device_info());
      break;
    }
    case kImuAccGyro: {
      _internal_mutable_imu_acc_gyro()->::pb_viewer::IMUAccGyro::MergeFrom(from._internal_imu_acc_gyro());
      break;
    }
    case kImuTemperature: {
      _internal_mutable_imu_temperature()->::pb_viewer::IMUTemperature::MergeFrom(from._internal_imu_temperature());
      break;
    }
    case kImuMagnetometer: {
      _internal_mutable_imu_magnetometer()->::pb_viewer::IMUMagnetometer::MergeFrom(from._internal_imu_magnetometer());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_viewer.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::InternalSwap(Message* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(sequence_id_, other->sequence_id_);
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fake_5fproto_5fserial_2eproto_getter, &descriptor_table_fake_5fproto_5fserial_2eproto_once,
      file_level_metadata_fake_5fproto_5fserial_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace pb_viewer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb_viewer::MCUDeviceInfo*
Arena::CreateMaybeMessage< ::pb_viewer::MCUDeviceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_viewer::MCUDeviceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_viewer::IMUDeviceInfo*
Arena::CreateMaybeMessage< ::pb_viewer::IMUDeviceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_viewer::IMUDeviceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_viewer::IMUAccGyro*
Arena::CreateMaybeMessage< ::pb_viewer::IMUAccGyro >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_viewer::IMUAccGyro >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_viewer::IMUTemperature*
Arena::CreateMaybeMessage< ::pb_viewer::IMUTemperature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_viewer::IMUTemperature >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_viewer::IMUMagnetometer*
Arena::CreateMaybeMessage< ::pb_viewer::IMUMagnetometer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_viewer::IMUMagnetometer >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_viewer::Command*
Arena::CreateMaybeMessage< ::pb_viewer::Command >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_viewer::Command >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_viewer::Message*
Arena::CreateMaybeMessage< ::pb_viewer::Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_viewer::Message >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
